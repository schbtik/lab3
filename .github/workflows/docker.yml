name: Build and Test Docker Container  # Назва для цього процесу (workflows)

on:
  push:
    branches:
      - main  # або інша гілка, за якою ви хочете запускати workflow
  pull_request:
    branches:
      - main  # Запуск workflow при створенні pull request на гілку main

jobs:
  build:
    runs-on: ubuntu-latest  # Виконання на останньому образі Ubuntu в GitHub Actions

    services:
      postgres:
        image: postgres:13  # Використовуємо образ PostgreSQL версії 13
        env:
          POSTGRES_USER: example  # Ім'я користувача для PostgreSQL
          POSTGRES_PASSWORD: example  # Пароль для PostgreSQL
          POSTGRES_DB: exampledb  # Назва бази даних для PostgreSQL
        ports:
          - 5432:5432  # Відкриваємо порт для PostgreSQL
        options: >-
          --health-cmd="pg_isready -U example"  # Перевірка стану контейнера PostgreSQL
          --health-interval=10s  # Перевірка стану кожні 10 секунд
          --health-timeout=5s  # Час очікування для перевірки стану
          --health-retries=5  # Кількість спроб перевірки стану

    steps:
      # Крок для отримання коду з репозиторію
      - name: Checkout code
        uses: actions/checkout@v2  # Використовуємо стандартну дію для отримання коду з репозиторію

      # Крок для налаштування Docker Buildx (рекомендується для багатоплатформових збірок)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1  # Налаштування Docker Buildx для збірки

      # Крок для логіну в Docker Hub (якщо ви використовуєте Docker Hub)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2  # Стандартна дія для входу в Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Логін для Docker Hub, зберігається в GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Пароль для Docker Hub, зберігається в GitHub Secrets

      # Крок для збірки Docker образу за допомогою docker-compose
      - name: Build Docker image
        run: docker-compose -f docker-compose.yml build  # Використовуємо docker-compose для зборки образу

      # Крок для запуску контейнерів за допомогою docker-compose
      - name: Run Docker container
        run: docker-compose -f docker-compose.yml up -d  # Запускаємо контейнери в фоновому режимі

      # Крок для виконання тестів всередині контейнера
      - name: Run tests
        run: |
          docker-compose exec web python manage.py test  # Виконуємо тести Django в контейнері web

      # Крок для зупинки контейнерів після виконання тестів
      - name: Stop containers
        run: docker-compose down  # Зупиняємо та видаляємо контейнери після завершення тестів
